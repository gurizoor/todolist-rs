
use super::lib::*;

    // All my function comments were generated in codeium
    // ↓ generated by codeium ↓

    /// The main app component. It manages the state of the to-do list and
    /// provides callback functions for adding tasks and folders.
    ///
    /// It uses the `ItemManager` component to manage the state of the to-do list.
    /// The `ItemManager` component provides functions for adding, removing, and
    /// sorting items in the list.
    ///
    /// The app component also provides callback functions for adding tasks and
    /// folders. These callback functions are passed to the `ItemManager` component
    /// which then calls the callback functions when the user clicks on the
    /// "add-task" or "add-folder" buttons.
    ///
    /// The app component renders a text input field, two buttons, and a
    /// container element for the tasks. The tasks are rendered as a list of
    /// labels and checkboxes. The app component also renders a version number
    /// at the bottom of the page.
#[function_component(App)]
pub fn app() -> Html {
    let items = use_state(|| ItemManager::new());
    let input_value = use_state(String::new);

    let on_input = {
        let input_value = input_value.clone();
        Callback::from(move |e: InputEvent| {
            if let Some(input) = e.target_dyn_into::<web_sys::HtmlInputElement>() {
                input_value.set(input.value());
            }
        })
    };

    let add_item = {
        let items = items.clone();
        move |item: Item, can_remove: bool| {
            let document = web_sys::window().unwrap().document().unwrap();
            let new_div = document.create_element("div").unwrap();
            new_div.set_id(&item.id);
            item.get_parent_element().append_child(&new_div).unwrap();

            let new_input = document.create_element("input").unwrap();
            let input_element = new_input.clone().dyn_into::<HtmlInputElement>().unwrap();
            input_element.set_id(&format!("{}-input", item.id));

            if item.is_task {
                input_element.set_type("checkbox");
                input_element.set_checked(item.checked);
            } else {
                input_element.set_type("radio");
                input_element.set_name("folder");
                input_element.set_checked(item.checked);
                new_div.set_attribute("class", div_list().get_class_name()).unwrap();
            }

            let items_clone = items.clone();
            let item_clone = item.clone();
            let listener = Closure::wrap(Box::new(move |_: web_sys::MouseEvent| {
                let mut value = ItemManager::s_load_data();
                value.value.retain(|x| x.id != item_clone.id);
                value.value.push(item_clone.set_checked(input_element.checked()));
                items_clone.set(value.save_data());
            }) as Box<dyn Fn(MouseEvent)>);

            new_input.add_event_listener_with_callback("click", &listener.as_ref().unchecked_ref()).unwrap();
            listener.forget();
            new_div.append_child(&new_input).unwrap();

            let new_label = document.create_element("label").unwrap();
            let label_element = new_label.clone().dyn_into::<HtmlElement>().unwrap();
            label_element.set_inner_html(&item.value);
            label_element.set_attribute("for", &format!("{}-input", item.id)).unwrap();
            new_div.append_child(&new_label).unwrap();

            if can_remove {
                let new_button = document.create_element("button").unwrap();
                new_button.set_inner_html("x");
                new_button.set_class_name(button_list().get_class_name());
                let items_clone = items.clone();
                let item_clone = item.clone();
                let listener = Closure::wrap(Box::new(move |_: web_sys::MouseEvent| {
                    items_clone.set(ItemManager::s_load_data().rmv(item_clone.clone()).save_data());
                }) as Box<dyn Fn(MouseEvent)>);
                new_button.add_event_listener_with_callback("click", &listener.as_ref().unchecked_ref()).unwrap();
                listener.forget();
                new_div.append_child(&new_button).unwrap();
            }

            item.clone()
        }
    };

    let add_task = {
        let items = items.clone();
        let input_value = input_value.clone();
        let add_item = add_item.clone();

        move |_| {
            let div_id = format!("{}-+{}", items.selected_folder(), *input_value);
            let item = Item::new(div_id.clone(), false, true);
            let new_items = items.add(add_item(item.clone(), true));
            items.set(new_items.clone());
            new_items.save_data();
            input_value.set("".to_string());
        }
    };

    let add_folder = {
        let items = items.clone();
        let input_value = input_value.clone();
        let add_item = add_item.clone();

        move |_| {
            let div_id = format!("{}-+{}", items.selected_folder(), *input_value);
            let item = Item::new(div_id.clone(), false, false);
            let new_items = items.add(add_item(item.clone(), true));
            items.set(new_items.clone());
            new_items.save_data();
            input_value.set("".to_string());
        }
    };

    use_effect_with((), {
        let items = items.clone();
        let add_item = add_item.clone();
        move |_| {
            log!("To-do list initialized");
            let mut value = ItemManager::new();
            value = value.add(add_item(Item::new("task-list-+General".to_string(), true, false), false));
            value = value.add(add_item(Item::new("task-list-+Day".to_string(), false, false), false));
            value = value.add(add_item(Item::new("task-list-+Week".to_string(), false, false), false));
            value = value.add(add_item(Item::new("task-list-+Month".to_string(), false, false), false));

            let pre_value = value.load_data().sort_value();
            if pre_value.rmv_levl_below_1().value.is_empty() {
                log!("No items found");
            } else {
                for item in pre_value.rmv_levl_below_1().init_checkbox().value.clone() {
                    value = value.add(add_item(item.clone(), true));
                }
            }
            items.set(pre_value);
        }
    });

    html! {
        <div>
            <Global css={global_style()}/>
            <div>
                <h2 class={classes!(title())}>{"Todo-list | rust.ver"}</h2>
            </div>

            <div>
                <input
                    id="task_input"
                    type="text"
                    placeholder="Enter a new task or new folder"
                    class={classes!(task_input())}
                    value={(*input_value).clone()}
                    oninput={on_input}
                />
                <button 
                    onclick={add_task}
                    class={classes!(task_button())}>
                    {"add-task"}
                </button>
                <button 
                    onclick={add_folder}
                    class={classes!(task_button())}>
                    {"add-folder"}
                </button>
            </div>

            <div id="task-list">
                // tasks will be appended here
            </div>

            <a>{"ver 1.0.0"}</a>
        </div>
    }
}
